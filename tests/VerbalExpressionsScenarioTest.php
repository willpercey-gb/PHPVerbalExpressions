<?php

use UWebPro\PHPVerbalExpressions\VerbalExpressionsScenario;
use PHPUnit\Framework\TestCase;

class VerbalExpressionsScenarioTest extends TestCase
{
    /**
     * @dataProvider expressionProvider
     */
    public function testScenarios($expression, $expectation)
    {
        $reg = new VerbalExpressionsScenario($expression);

        $this->assertEquals($expectation, (string)$reg, sprintf('The expected result "%s" is wrongly generated by the expression "%s"', $expectation, $expression));
    }

    public function expressionProvider()
    {
        return array(
            array('start, then "http", range "a,z,1,2", end', '/(?:http)[a-z1-2]/m'),
            array('start, anythingBut "http", maybe  "zed", end', '/(?:[^http]*)(?:zed)?/m'),
            array('start, any "foo", br, linebreak, tab, end', '/[foo](?:\n|(\r\n))(?:\n|(\r\n))\t/m'),
            array('start, any "http", br, end', '/[http](?:\n|(\r\n))/m'),
            array('start, anyOf "12", then "foo", end', '/[12](?:foo)/m'),
            array('start, anything, word, end', '/(?:.*)\w+/m'),
            array('start, then "foo", withAnyCase, end', '/(?:foo)/'),
            array('start, then "foo", stopAtFirst, searchOneLINE, end', '/(?:foo)/'),
            array('start, then "foo", or "bar", end', '/(?:(?:foo))|(?:bar/m'),
            array('start, word, limit "3", end', '/\w{3}/m'),
            array('start, find "foo", replace "foo,bar", end', '/(?:foo)/m'),
            array('start, then "abc", multiple "2", end', '/(?:abc)2+/m'),
            array('start, then "abc", add "something", end', '/(?:abc)something/m'),
            array('something', '/(?:.+)/m'),
        );
    }
}
